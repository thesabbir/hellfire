/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as SystemRouteImport } from './routes/system'
import { Route as SignupRouteImport } from './routes/signup'
import { Route as OnboardingRouteImport } from './routes/onboarding'
import { Route as NetworkRouteImport } from './routes/network'
import { Route as LoginRouteImport } from './routes/login'
import { Route as FirewallRouteImport } from './routes/firewall'
import { Route as DhcpRouteImport } from './routes/dhcp'
import { Route as IndexRouteImport } from './routes/index'

const SystemRoute = SystemRouteImport.update({
  id: '/system',
  path: '/system',
  getParentRoute: () => rootRouteImport,
} as any)
const SignupRoute = SignupRouteImport.update({
  id: '/signup',
  path: '/signup',
  getParentRoute: () => rootRouteImport,
} as any)
const OnboardingRoute = OnboardingRouteImport.update({
  id: '/onboarding',
  path: '/onboarding',
  getParentRoute: () => rootRouteImport,
} as any)
const NetworkRoute = NetworkRouteImport.update({
  id: '/network',
  path: '/network',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const FirewallRoute = FirewallRouteImport.update({
  id: '/firewall',
  path: '/firewall',
  getParentRoute: () => rootRouteImport,
} as any)
const DhcpRoute = DhcpRouteImport.update({
  id: '/dhcp',
  path: '/dhcp',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/dhcp': typeof DhcpRoute
  '/firewall': typeof FirewallRoute
  '/login': typeof LoginRoute
  '/network': typeof NetworkRoute
  '/onboarding': typeof OnboardingRoute
  '/signup': typeof SignupRoute
  '/system': typeof SystemRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/dhcp': typeof DhcpRoute
  '/firewall': typeof FirewallRoute
  '/login': typeof LoginRoute
  '/network': typeof NetworkRoute
  '/onboarding': typeof OnboardingRoute
  '/signup': typeof SignupRoute
  '/system': typeof SystemRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/dhcp': typeof DhcpRoute
  '/firewall': typeof FirewallRoute
  '/login': typeof LoginRoute
  '/network': typeof NetworkRoute
  '/onboarding': typeof OnboardingRoute
  '/signup': typeof SignupRoute
  '/system': typeof SystemRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/dhcp'
    | '/firewall'
    | '/login'
    | '/network'
    | '/onboarding'
    | '/signup'
    | '/system'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/dhcp'
    | '/firewall'
    | '/login'
    | '/network'
    | '/onboarding'
    | '/signup'
    | '/system'
  id:
    | '__root__'
    | '/'
    | '/dhcp'
    | '/firewall'
    | '/login'
    | '/network'
    | '/onboarding'
    | '/signup'
    | '/system'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DhcpRoute: typeof DhcpRoute
  FirewallRoute: typeof FirewallRoute
  LoginRoute: typeof LoginRoute
  NetworkRoute: typeof NetworkRoute
  OnboardingRoute: typeof OnboardingRoute
  SignupRoute: typeof SignupRoute
  SystemRoute: typeof SystemRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/system': {
      id: '/system'
      path: '/system'
      fullPath: '/system'
      preLoaderRoute: typeof SystemRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/signup': {
      id: '/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof SignupRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/onboarding': {
      id: '/onboarding'
      path: '/onboarding'
      fullPath: '/onboarding'
      preLoaderRoute: typeof OnboardingRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/network': {
      id: '/network'
      path: '/network'
      fullPath: '/network'
      preLoaderRoute: typeof NetworkRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/firewall': {
      id: '/firewall'
      path: '/firewall'
      fullPath: '/firewall'
      preLoaderRoute: typeof FirewallRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dhcp': {
      id: '/dhcp'
      path: '/dhcp'
      fullPath: '/dhcp'
      preLoaderRoute: typeof DhcpRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DhcpRoute: DhcpRoute,
  FirewallRoute: FirewallRoute,
  LoginRoute: LoginRoute,
  NetworkRoute: NetworkRoute,
  OnboardingRoute: OnboardingRoute,
  SignupRoute: SignupRoute,
  SystemRoute: SystemRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
