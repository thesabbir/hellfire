// This file is auto-generated by @hey-api/openapi-ts

import type { Client, Options as Options2, TDataShape } from "./client";
import { client } from "./client.gen";
import type {
  GetAuthCsrfData,
  GetAuthCsrfResponses,
  GetAuthMeData,
  GetAuthMeErrors,
  GetAuthMeResponses,
  GetBootstrapData,
  GetBootstrapResponses,
  GetChangesData,
  GetChangesResponses,
  GetConfigByNameBySectionByOptionData,
  GetConfigByNameBySectionByOptionErrors,
  GetConfigByNameBySectionByOptionResponses,
  GetConfigByNameBySectionData,
  GetConfigByNameBySectionErrors,
  GetConfigByNameBySectionResponses,
  GetConfigByNameData,
  GetConfigByNameErrors,
  GetConfigByNameResponses,
  GetHealthData,
  GetHealthResponses,
  PostAuthLoginData,
  PostAuthLoginErrors,
  PostAuthLoginResponses,
  PostAuthLogoutData,
  PostAuthLogoutErrors,
  PostAuthLogoutResponses,
  PostCommitData,
  PostCommitErrors,
  PostCommitResponses,
  PostOnboardingData,
  PostOnboardingErrors,
  PostOnboardingResponses,
  PostRevertData,
  PostRevertErrors,
  PostRevertResponses,
  PostValidateData,
  PostValidateErrors,
  PostValidateResponses,
  PutConfigByNameBySectionByOptionData,
  PutConfigByNameBySectionByOptionErrors,
  PutConfigByNameBySectionByOptionResponses,
} from "./types.gen";

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean,
> = Options2<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client;
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>;
};

/**
 * Get CSRF token
 * Get a CSRF token for making authenticated state-changing requests
 */
export const getAuthCsrf = <ThrowOnError extends boolean = false>(
  options?: Options<GetAuthCsrfData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetAuthCsrfResponses,
    unknown,
    ThrowOnError
  >({
    url: "/auth/csrf",
    ...options,
  });
};

/**
 * User login
 * Authenticate user and get session token
 */
export const postAuthLogin = <ThrowOnError extends boolean = false>(
  options: Options<PostAuthLoginData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    PostAuthLoginResponses,
    PostAuthLoginErrors,
    ThrowOnError
  >({
    url: "/auth/login",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * User logout
 * Invalidate current session
 */
export const postAuthLogout = <ThrowOnError extends boolean = false>(
  options?: Options<PostAuthLogoutData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    PostAuthLogoutResponses,
    PostAuthLogoutErrors,
    ThrowOnError
  >({
    url: "/auth/logout",
    ...options,
  });
};

/**
 * Get current user
 * Get information about the current authenticated user
 */
export const getAuthMe = <ThrowOnError extends boolean = false>(
  options?: Options<GetAuthMeData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetAuthMeResponses,
    GetAuthMeErrors,
    ThrowOnError
  >({
    url: "/auth/me",
    ...options,
  });
};

/**
 * System bootstrap metadata
 * Get system metadata including initialization status
 */
export const getBootstrap = <ThrowOnError extends boolean = false>(
  options?: Options<GetBootstrapData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetBootstrapResponses,
    unknown,
    ThrowOnError
  >({
    url: "/bootstrap",
    ...options,
  });
};

/**
 * Get staged changes
 * Get list of staged configuration changes
 */
export const getChanges = <ThrowOnError extends boolean = false>(
  options?: Options<GetChangesData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetChangesResponses,
    unknown,
    ThrowOnError
  >({
    url: "/changes",
    ...options,
  });
};

/**
 * Commit changes
 * Commit staged configuration changes to the system
 */
export const postCommit = <ThrowOnError extends boolean = false>(
  options?: Options<PostCommitData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    PostCommitResponses,
    PostCommitErrors,
    ThrowOnError
  >({
    url: "/commit",
    ...options,
  });
};

/**
 * Get configuration
 * Get entire configuration file
 */
export const getConfigByName = <ThrowOnError extends boolean = false>(
  options: Options<GetConfigByNameData, ThrowOnError>,
) => {
  return (options.client ?? client).get<
    GetConfigByNameResponses,
    GetConfigByNameErrors,
    ThrowOnError
  >({
    url: "/config/{name}",
    ...options,
  });
};

/**
 * Get configuration section
 * Get a specific section from configuration
 */
export const getConfigByNameBySection = <ThrowOnError extends boolean = false>(
  options: Options<GetConfigByNameBySectionData, ThrowOnError>,
) => {
  return (options.client ?? client).get<
    GetConfigByNameBySectionResponses,
    GetConfigByNameBySectionErrors,
    ThrowOnError
  >({
    url: "/config/{name}/{section}",
    ...options,
  });
};

/**
 * Get configuration option
 * Get a specific option value from a section
 */
export const getConfigByNameBySectionByOption = <
  ThrowOnError extends boolean = false,
>(
  options: Options<GetConfigByNameBySectionByOptionData, ThrowOnError>,
) => {
  return (options.client ?? client).get<
    GetConfigByNameBySectionByOptionResponses,
    GetConfigByNameBySectionByOptionErrors,
    ThrowOnError
  >({
    url: "/config/{name}/{section}/{option}",
    ...options,
  });
};

/**
 * Set configuration option
 * Set a configuration option value (staged, requires commit)
 */
export const putConfigByNameBySectionByOption = <
  ThrowOnError extends boolean = false,
>(
  options: Options<PutConfigByNameBySectionByOptionData, ThrowOnError>,
) => {
  return (options.client ?? client).put<
    PutConfigByNameBySectionByOptionResponses,
    PutConfigByNameBySectionByOptionErrors,
    ThrowOnError
  >({
    url: "/config/{name}/{section}/{option}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Health check
 * Check if the API server is running
 */
export const getHealth = <ThrowOnError extends boolean = false>(
  options?: Options<GetHealthData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetHealthResponses,
    unknown,
    ThrowOnError
  >({
    url: "/health",
    ...options,
  });
};

/**
 * Create initial admin user
 * Create the first admin user during system onboarding
 */
export const postOnboarding = <ThrowOnError extends boolean = false>(
  options: Options<PostOnboardingData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    PostOnboardingResponses,
    PostOnboardingErrors,
    ThrowOnError
  >({
    url: "/onboarding",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Revert changes
 * Revert all staged configuration changes
 */
export const postRevert = <ThrowOnError extends boolean = false>(
  options?: Options<PostRevertData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    PostRevertResponses,
    PostRevertErrors,
    ThrowOnError
  >({
    url: "/revert",
    ...options,
  });
};

/**
 * Validate staged changes
 * Validate staged configuration changes without applying them (dry-run)
 */
export const postValidate = <ThrowOnError extends boolean = false>(
  options?: Options<PostValidateData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    PostValidateResponses,
    PostValidateErrors,
    ThrowOnError
  >({
    url: "/validate",
    ...options,
  });
};
